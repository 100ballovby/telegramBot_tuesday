import telebot
import requests as r
import os
from datetime import datetime


def get_weather(city):
    url = 'https://api.openweathermap.org/data/2.5/forecast'
    params = {  # –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        'q': city.capitalize(),  # –ü–∏—à–µ—Ç –≥–æ—Ä–æ–¥ —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã
        'appid': os.environ.get('WEATHER_KEY'),
        'units': 'metric',  # –≥—Ä–∞–¥—É—Å—ã –≤ —Ü–µ–ª—å—Å–∏—è—Ö
        'lang': 'ru'  # —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
    }
    response = r.get(url, params=params)
    if response.status_code == 200:  #
        data = response.json()
        today = datetime.today()  # —Å–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
        forecast = []  # –∑–¥–µ—Å—å –±—É–¥—É —Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã
        for line in data['list']:
            date = datetime.fromtimestamp(line['dt'])
            if (date.hour in [9, 15, 21]) and (date.day in [today.day, today.day + 1] or date.day == 1):
                day = {
                    'date': datetime.strftime(date, '%d/%m, %H:%M'),
                    'temp': round(line['main']['temp']),
                    'weather': line['weather'][0]['description']
                }
                forecast.append(day)
        return forecast
    else:
        return None


def get_currencies():
    url_codes = 'https://api.coinbase.com/v2/currencies'
    response_code = r.get(url_codes)
    data = response_code.json()
    currencies = {}
    for cur in data['data']:
        currencies[cur['id']] = cur['name']

    return currencies


def get_rates(base, amount, target):
    url_codes = f'https://api.coinbase.com/v2/exchange-rates?currency={base.upper()}'
    try:
        response_code = r.get(url_codes)
        data = response_code.json()
        rates = data['data']['rates']
        result = round(amount * float(rates[target.upper()]), 2)
        return result
    except:
        return None


bot = telebot.TeleBot(os.environ.get('BOT_KEY'))


@bot.message_handler(commands=['start'])  # —á—Ç–æ –¥–µ–ª–∞–µ–º, –∫–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ /start
def start_message(message):
    with open('assets/greeting.txt', encoding='utf8') as file:
        greeting = file.read()
    bot.send_message(message.chat.id, greeting)


@bot.message_handler(commands=['help'])  # —á—Ç–æ –¥–µ–ª–∞–µ–º, –∫–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ /start
def help_message(message):
    with open('assets/help.txt', encoding='utf8') as file:
        help_text = file.read()
    bot.send_message(message.chat.id, help_text)


@bot.message_handler(commands=['buttons'])
def button_message(message):
    layout = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    # ^ –≤—ã—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±–ª–∞—Å—Ç—å, –≤ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥—É—Ç –ø–æ—è–≤–ª—è—Ç—å—Å—è –∫–Ω–æ–ø–∫–∏, –æ–±–ª–∞—Å—Ç—å —Ä–∞—Å—à–∏—Ä—è–µ—Ç—Å—è –ø–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫
    b1 = telebot.types.KeyboardButton('–ö–Ω–æ–ø–∫–∞')  # —Å–æ–∑–¥–∞—é –∫–Ω–æ–ø–∫—É
    b2 = telebot.types.KeyboardButton('–ö–Ω–æ–ø–∫–∞ 2')  # –¢–µ–∫—Å—Ç –Ω–∞ –∫–Ω–æ–ø–∫–µ - —ç—Ç–æ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–ª—É—á–∏—Ç –±–æ—Ç
    layout.add(b1)  # –¥–æ–±–∞–≤–ª—è—é –∫–Ω–æ–ø–∫—É –≤ –æ–±–ª–∞—Å—Ç—å
    layout.add(b2)
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ', reply_markup=layout)  # –ø–µ—Ä–µ–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º


@bot.message_handler(content_types=['text'])
def get_codes(message):
    codes = get_currencies()
    if message.text.startswith('/cur_code'):  # –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å /cur_code
        try:
            user_message = message.text.split()  # –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫
            answer = user_message[1].upper() in codes.keys()
            bot.send_message(message.chat.id, codes[user_message[1].upper()])
        except (ValueError, TypeError, IndexError, SyntaxError, KeyError):
            bot.send_message(message.chat.id, '–¢–∞–∫–æ–π –≤–∞–ª—é—Ç—ã –Ω–µ—Ç!')
    elif message.text.startswith('/exchange'):
        user_message = message.text.split()
        result = get_rates(base=user_message[2],
                           amount=float(user_message[1]),
                           target=user_message[4])
        if (result is not None) and (result != 0.0):  # –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–¥–∞–ª–∞ –∑–Ω–∞—á–µ–Ω–∏—è –∏ —ç—Ç–æ –Ω–µ 0
            base = codes[user_message[2].upper()]
            target = codes[user_message[4].upper()]
            answer = f'{user_message[1]} {base}\n—ç—Ç–æ {result} {target}üí∞'
            bot.send_message(message.chat.id, answer)
        else:
            bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞')
    elif message.text.startswith('/weather'):
        user_message = message.text.split()
        forecast = get_weather(user_message[1])
        answer = ''
        try:
            for line in forecast:
                answer += f'{line["date"]} {line["weather"]}, {line["temp"]}¬∞–°\n'
        except TypeError:
            answer = '–í—ã –≤–≤–µ–ª–∏ –≥–æ—Ä–æ–¥, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! '
        bot.send_message(message.chat.id, answer)
    elif message.text == '–ö–Ω–æ–ø–∫–∞':
        bot.send_message(message.chat.id, '–°–ü–°')
    elif message.text == '–ö–Ω–æ–ø–∫–∞ 2':
        bot.send_message(message.chat.id, '–ù—É –∏ –ª–∞–¥–Ω–æ!')


bot.polling(none_stop=True, interval=0)
